# Example config for:
# Every PHP SessID gets an own cache
# Re-Open the same site with same PHP SessID during 10s will be answered from varnish cache. Only first request will be go to the backend
# 
# 
backend fe0_ff {
  .host  = "10.28.30.100";
  .port  = "80";
  .probe = {
    .url       = "/index2.php";
    .timeout   = 1s;
    .interval  = 1s;
    .window    = 10;
    .threshold = 3;
  }
}

backend fe1_ff {
  .host  = "10.28.30.101";
  .port  = "80";
  .probe = {
    .url       = "/index2.php";
    .timeout   = 1s;
    .interval  = 1s;
    .window    = 10;
    .threshold = 3;
  }
}

director default_director round-robin {
  { .backend = fe0_ff;  }
  { .backend = fe1_ff;  }
}


#https://www.varnish-cache.org/trac/wiki/VCLExampleNormalizeUserAgent
sub normalize_user_agent {
    if (req.http.user-agent ~ "MSIE") {
        set req.http.X-UA = "msie";
    } else if (req.http.user-agent ~ "Firefox") {
        set req.http.X-UA = "firefox";
    } else if (req.http.user-agent ~ "Safari") {
        set req.http.X-UA = "safari";
    } else if (req.http.user-agent ~ "Opera Mini/") {
        set req.http.X-UA = "opera-mini";
    } else if (req.http.user-agent ~ "Opera Mobi/") {
        set req.http.X-UA = "opera-mobile";
    } else if (req.http.user-agent ~ "Opera") {
        set req.http.X-UA = "opera";
    } else {
        set req.http.X-UA = "nomatch";
    }
}

sub vcl_recv {

	set req.backend = default_director;
	
	if (req.restarts == 0) {
                if (req.http.x-forwarded-for) {
                        set req.http.X-Forwarded-For =
                                req.http.X-Forwarded-For + ", " + client.ip;
                } else {
                        set req.http.X-Forwarded-For = client.ip;
                }
    }
	
	
	# Use anonymous, cached pages if all backends are down.
    if (!req.backend.healthy) {
    		unset req.http.Cookie;
        	set req.grace = 1d;
        } else {
        	set req.grace = 10m;
        }
	
	if (req.request != "GET" &&
        req.request != "HEAD" &&
        req.request != "PUT" &&
        req.request != "POST" &&
        req.request != "TRACE" &&
        req.request != "OPTIONS" &&
        req.request != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return(pipe);
        }

        if (req.request != "GET" && req.request != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return(pass);
        }
        
    /* pipeline post requests trac #4124 https://www.varnish-cache.org/trac/ticket/849 */
    if (req.request == "POST") {
            return(pipe);
    }
	
	
	if (req.request == "PURGE") {
                if (!client.ip ~ purge) {
                error 405 "Not allowed.";
                }
                error 200 "Purged.";
                return (lookup);
        }

        if (req.request == "BAN") {
                ban("req.http.host == " + req.http.host +
                        "&& req.url == " + req.url);
                error 200 "Ban added";
        }

        if (req.http.Cache-Control ~ "no-cache") {
                if (! (req.http.Via || req.http.User-Agent ~ "bot|MSIE")) {
                ban (req.url);
                }
        }
	
	call normalize_user_agent;
	
	# @see: http:// varnish.projects.linpro.no/wiki/FAQ/Compression
        if (req.http.Accept-Encoding) {
                if (req.http.Accept-Encoding ~ "gzip") {
                # If the browser supports it, we'll use gzip.
                set req.http.Accept-Encoding = "gzip";
                }
                else if (req.http.Accept-Encoding ~ "deflate") {
                # Next, try deflate if it is supported.
                set req.http.Accept-Encoding = "deflate";
                }
                else {
                # Unknown algorithm. Remove it and send unencoded.
                unset req.http.Accept-Encoding;
                }
        }
	
	if (req.url ~ "(?i)\.(js|txt|gz|zip|lzma|bz2|tgz|tbz|png|gif|jpeg|jpg|ico|swf|css|flv|mp3|mp4|pdf)(\?[a-z0-9]+)?$") {
                set req.url = regsub(req.url, "\?.*$", "");
                unset req.http.cookie;
                unset req.http.Cache-Control;
                unset req.http.Max-Age;
                unset req.http.Pragma;
    }
	
	if (req.http.Authorization || req.http.Authenticate){
                return (pass);
    }

	
	return(lookup);

}

sub vcl_pipe {
	/* Force the connection to be closed afterwards so subsequent reqs don't use pipe */
	set bereq.http.connection = "close";	
	# This is not necessary if you do not do any request rewriting.
        set req.http.connection = "close";
}

sub vcl_pass {
	    return (pass);
	}

sub vcl_hash {
	
	hash_data(req.url);
    	
	if (req.http.host) {
        	hash_data(req.http.host);
	}
	if (req.http.cookie) {
		hash_data(req.http.cookie);
    	} else {
        	hash_data(server.ip);
    	}	
        return (hash);
}

sub vcl_hit {
	
	if (req.http.Cache-Control ~ "no-cache") {
		if (! (req.http.Via || req.http.User-Agent ~ "bot|MSIE")) {
		set obj.ttl = 0s;
		return (restart);
		}	
	}

	if (obj.ttl<=0s){
		return(pass);
	}

	
	if (req.request == "PURGE") {
                purge;
                error 200 "Purged.";
        }
	
	return(deliver);
}

sub vcl_miss {
	
	if (req.request == "PURGE") {
                purge;
                error 200 "Purged.";
        }
	
	return (fetch);
}

## Fetch
sub vcl_fetch {
	
	# Allow items to be stale if needed.
        set beresp.grace = 10d;
	
	set beresp.ttl = 10s;

	set beresp.do_esi = true;
	
	if (beresp.ttl <= 0s ||
	beresp.http.Set-Cookie ||
	beresp.http.Vary == "*") {
		set beresp.ttl = 10 s;
		return (hit_for_pass);
    }



	#https://www.varnish-cache.org/trac/wiki/VCLExampleSaintMode
	if (beresp.status == 500) { 
      		set beresp.saintmode = 20s;
      		if (req.request != "POST") {
           		return(restart);
      		} else {
           		error 500 "Failed";
	      }
	}
	
	if (beresp.status == 404) {
		# Cache 404 responses for 15 seconds
   	 	error 404;
		set beresp.http.Cache-Control = "max-age=15";
    		set beresp.ttl = 15s;
    		set beresp.grace = 15s;
        }
        
    /* if (beresp.status == 503) {
		error 200;
	} */


	#Respect force-reload, and clear cache accordingly. This means that a ctrl-reload will acutally purge 
	# the cache for this URL.
	if (req.http.Cache-Control ~ "no-cache") {
  		set beresp.ttl = 0s;
  		#Make sure ESI includes are processed!
		set beresp.do_esi = true;
		remove beresp.http.Cache-Control;
                remove beresp.http.Expires;
                remove beresp.http.Last-Modified;
                remove beresp.http.ETag;
                remove beresp.http.Pragma;
	
  		return (deliver);
	}



	if (beresp.http.content-type ~ "(css|text|html|json|x-javascript|xml|javascript|rss+xml|atom+xml|rdf+xml)") {
              set beresp.do_gzip = true;
      	}

	if (req.http.host ~ "^(www\.)?cablecarproductions\.de$") {
	
		remove beresp.http.Cache-Control;
		remove beresp.http.Expires;
		remove beresp.http.Last-Modified;
		remove beresp.http.ETag;
		remove beresp.http.Pragma;
	}

	# Don't allow static files to set cookies.
  	if (req.url ~ "(?i)\.(js|txt|gz|zip|lzma|bz2|tgz|tbz|png|gif|jpeg|jpg|ico|swf|css|flv|mp3|mp4|pdf)(\?[a-z0-9]+)?$") {
    		unset beresp.http.set-cookie;
                unset beresp.http.expires;
                set beresp.ttl = 7d;
                set beresp.http.magicmarker = "1";

                }
	

    	if (beresp.ttl <= 0s) {
        	set beresp.http.X-Cacheable = "NO:Not Cacheable";
    
    	} elsif (req.http.Cookie ~ "(UserID|_session)") {
        	set beresp.http.X-Cacheable = "NO:Got Session";
        	return(hit_for_pass);

	} elsif (req.http.Cookie ~ ".*TYPO3_FE_USER_LOGGED_IN=1.*") {
                set beresp.http.X-Cacheable = "NO, FRONTEND USER LOGGED IN";
    
    	} elsif (beresp.http.Cache-Control ~ "private") {
        	set beresp.http.X-Cacheable = "NO:Cache-Control=private";
        	return(hit_for_pass);
    
        } elsif (beresp.ttl < 1s) {
                set beresp.ttl   = 5s;
                set beresp.grace = 5s;
                set beresp.http.X-Cacheable = "YES:FORCED";

        } else {
                set beresp.http.X-Cacheable = "YES";
        }
	
	if ( req.request == "POST" || req.http.Authorization ) {
		return (hit_for_pass);
	}

	unset beresp.http.Server;
	set beresp.http.Server = "Apache";	
	
        return(deliver);
}




## Deliver
sub vcl_deliver {
	
	if (resp.http.magicmarker) {
    		unset resp.http.magicmarker;
		unset resp.http.Server;
		set resp.http.Cache-Control = "public,max-age=604800";
		set resp.http.Age = "0";
		set resp.http.X-Origin= "cache";
  		set resp.http.Vary= "Accept-Encoding";
	}

	if (obj.hits > 0) {
                set resp.http.X-Cache = "HIT";
		set resp.http.X-Cache-Hits = obj.hits;
        } else {
                set resp.http.X-Cache = "MISS";
        }	

}

sub vcl_error {
	return(deliver);
}

sub vcl_init {
        return (ok);
}
sub vcl_fini {
        return (ok);
}